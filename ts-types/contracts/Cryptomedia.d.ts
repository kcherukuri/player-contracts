/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CryptomediaInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bondingCurve()": FunctionFragment;
    "buy(uint256,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "feeBase()": FunctionFragment;
    "feePct()": FunctionFragment;
    "initialize(string,address)": FunctionFragment;
    "name()": FunctionFragment;
    "poolBalance()": FunctionFragment;
    "ppm()": FunctionFragment;
    "redeem(address,address)": FunctionFragment;
    "reserveRatio()": FunctionFragment;
    "sell(uint256,uint256)": FunctionFragment;
    "signalBalanceOf(address)": FunctionFragment;
    "signalTokenSupply()": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "tokensStakedToUser(address,address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalTokensStakedByUser(address)": FunctionFragment;
    "totalTokensStakedToUser(address)": FunctionFragment;
    "unstake(address)": FunctionFragment;
    "userInteractions(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bondingCurve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeBase", values?: undefined): string;
  encodeFunctionData(functionFragment: "feePct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ppm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "signalTokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensStakedToUser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensStakedByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensStakedToUser",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unstake", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userInteractions",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ppm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signalBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensStakedToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensStakedByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensStakedToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userInteractions",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Buy(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Sell(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class Cryptomedia extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CryptomediaInterface;

  functions: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bondingCurve(overrides?: CallOverrides): Promise<[string]>;

    buy(
      _price: BigNumberish,
      _minTokensReturned: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    feeBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    feePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _name: string,
      _bondingCurve: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    poolBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    ppm(overrides?: CallOverrides): Promise<[number]>;

    redeem(
      _staker: string,
      _contributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveRatio(overrides?: CallOverrides): Promise<[number]>;

    sell(
      _tokens: BigNumberish,
      _minETHReturned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    signalTokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokensStakedToUser(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTokensStakedByUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalTokensStakedToUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unstake(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInteractions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bondingCurve(overrides?: CallOverrides): Promise<string>;

  buy(
    _price: BigNumberish,
    _minTokensReturned: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  feeBase(overrides?: CallOverrides): Promise<BigNumber>;

  feePct(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _name: string,
    _bondingCurve: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  poolBalance(overrides?: CallOverrides): Promise<BigNumber>;

  ppm(overrides?: CallOverrides): Promise<number>;

  redeem(
    _staker: string,
    _contributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveRatio(overrides?: CallOverrides): Promise<number>;

  sell(
    _tokens: BigNumberish,
    _minETHReturned: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalBalanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  signalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokensStakedToUser(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalTokensStakedByUser(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalTokensStakedToUser(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unstake(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInteractions(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bondingCurve(overrides?: CallOverrides): Promise<string>;

    buy(
      _price: BigNumberish,
      _minTokensReturned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    feeBase(overrides?: CallOverrides): Promise<BigNumber>;

    feePct(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: string,
      _bondingCurve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    poolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    ppm(overrides?: CallOverrides): Promise<number>;

    redeem(
      _staker: string,
      _contributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reserveRatio(overrides?: CallOverrides): Promise<number>;

    sell(
      _tokens: BigNumberish,
      _minETHReturned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signalBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensStakedToUser(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokensStakedByUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTokensStakedToUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(_user: string, overrides?: CallOverrides): Promise<void>;

    userInteractions(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Buy(
      buyer?: string | null,
      poolBalance?: null,
      totalSupply?: null,
      tokens?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        poolBalance: BigNumber;
        totalSupply: BigNumber;
        tokens: BigNumber;
        price: BigNumber;
      }
    >;

    Sell(
      seller?: string | null,
      poolBalance?: null,
      totalSupply?: null,
      tokens?: null,
      eth?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        seller: string;
        poolBalance: BigNumber;
        totalSupply: BigNumber;
        tokens: BigNumber;
        eth: BigNumber;
      }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bondingCurve(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      _price: BigNumberish,
      _minTokensReturned: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    feeBase(overrides?: CallOverrides): Promise<BigNumber>;

    feePct(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: string,
      _bondingCurve: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    poolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    ppm(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _staker: string,
      _contributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    sell(
      _tokens: BigNumberish,
      _minETHReturned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokensStakedToUser(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokensStakedByUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTokensStakedToUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInteractions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondingCurve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      _price: BigNumberish,
      _minTokensReturned: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _bondingCurve: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ppm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _staker: string,
      _contributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sell(
      _tokens: BigNumberish,
      _minETHReturned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signalTokenSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokensStakedToUser(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTokensStakedByUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTokensStakedToUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInteractions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
