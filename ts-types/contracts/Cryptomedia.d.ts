/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CryptomediaInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "bondingCurve()": FunctionFragment;
    "buy(uint256,uint256)": FunctionFragment;
    "createLayer(string)": FunctionFragment;
    "created(address)": FunctionFragment;
    "curateLayer(address)": FunctionFragment;
    "curated(address)": FunctionFragment;
    "getLayer(address)": FunctionFragment;
    "initialize(string,address)": FunctionFragment;
    "name()": FunctionFragment;
    "poolBalance()": FunctionFragment;
    "ppm()": FunctionFragment;
    "removeCreatedLayer()": FunctionFragment;
    "removeCuratedLayer()": FunctionFragment;
    "reserveRatio()": FunctionFragment;
    "sell(uint256,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bondingCurve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "createLayer", values: [string]): string;
  encodeFunctionData(functionFragment: "created", values: [string]): string;
  encodeFunctionData(functionFragment: "curateLayer", values: [string]): string;
  encodeFunctionData(functionFragment: "curated", values: [string]): string;
  encodeFunctionData(functionFragment: "getLayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ppm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeCreatedLayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCuratedLayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "created", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "curateLayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "curated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ppm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCreatedLayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCuratedLayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;

  events: {
    "Buy(address,uint256,uint256,uint256,uint256)": EventFragment;
    "CurationAdded(address,address)": EventFragment;
    "CurationRemoved(address,address)": EventFragment;
    "LayerCreated(address,string)": EventFragment;
    "LayerRemoved(address)": EventFragment;
    "Sell(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "noLongerHolder(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CurationAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CurationRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LayerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LayerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "noLongerHolder"): EventFragment;
}

export class Cryptomedia extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CryptomediaInterface;

  functions: {
    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bondingCurve(overrides?: CallOverrides): Promise<[string]>;

    buy(
      _price: BigNumberish,
      _minTokensReturned: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLayer(
      _URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    created(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    curateLayer(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    curated(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    getLayer(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    initialize(
      _name: string,
      _bondingCurve: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    poolBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    ppm(overrides?: CallOverrides): Promise<[number]>;

    removeCreatedLayer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeCuratedLayer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveRatio(overrides?: CallOverrides): Promise<[number]>;

    sell(
      _tokens: BigNumberish,
      _minETHReturned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bondingCurve(overrides?: CallOverrides): Promise<string>;

  buy(
    _price: BigNumberish,
    _minTokensReturned: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLayer(
    _URI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  created(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  curateLayer(
    _creator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  curated(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getLayer(_user: string, overrides?: CallOverrides): Promise<[string, string]>;

  initialize(
    _name: string,
    _bondingCurve: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  poolBalance(overrides?: CallOverrides): Promise<BigNumber>;

  ppm(overrides?: CallOverrides): Promise<number>;

  removeCreatedLayer(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeCuratedLayer(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveRatio(overrides?: CallOverrides): Promise<number>;

  sell(
    _tokens: BigNumberish,
    _minETHReturned: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bondingCurve(overrides?: CallOverrides): Promise<string>;

    buy(
      _price: BigNumberish,
      _minTokensReturned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createLayer(_URI: string, overrides?: CallOverrides): Promise<void>;

    created(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    curateLayer(_creator: string, overrides?: CallOverrides): Promise<void>;

    curated(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getLayer(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    initialize(
      _name: string,
      _bondingCurve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    poolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    ppm(overrides?: CallOverrides): Promise<number>;

    removeCreatedLayer(overrides?: CallOverrides): Promise<void>;

    removeCuratedLayer(overrides?: CallOverrides): Promise<void>;

    reserveRatio(overrides?: CallOverrides): Promise<number>;

    sell(
      _tokens: BigNumberish,
      _minETHReturned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Buy(
      buyer?: string | null,
      poolBalance?: null,
      totalSupply?: null,
      tokens?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        poolBalance: BigNumber;
        totalSupply: BigNumber;
        tokens: BigNumber;
        price: BigNumber;
      }
    >;

    CurationAdded(
      curator?: string | null,
      layerCreator?: string | null
    ): TypedEventFilter<
      [string, string],
      { curator: string; layerCreator: string }
    >;

    CurationRemoved(
      curator?: string | null,
      layerCreator?: string | null
    ): TypedEventFilter<
      [string, string],
      { curator: string; layerCreator: string }
    >;

    LayerCreated(
      creator?: string | null,
      contentURI?: null
    ): TypedEventFilter<
      [string, string],
      { creator: string; contentURI: string }
    >;

    LayerRemoved(
      creator?: string | null
    ): TypedEventFilter<[string], { creator: string }>;

    Sell(
      seller?: string | null,
      poolBalance?: null,
      totalSupply?: null,
      tokens?: null,
      eth?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        seller: string;
        poolBalance: BigNumber;
        totalSupply: BigNumber;
        tokens: BigNumber;
        eth: BigNumber;
      }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    noLongerHolder(
      user?: string | null
    ): TypedEventFilter<[string], { user: string }>;
  };

  estimateGas: {
    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bondingCurve(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      _price: BigNumberish,
      _minTokensReturned: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLayer(
      _URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    created(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    curateLayer(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    curated(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLayer(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: string,
      _bondingCurve: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    poolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    ppm(overrides?: CallOverrides): Promise<BigNumber>;

    removeCreatedLayer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeCuratedLayer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    sell(
      _tokens: BigNumberish,
      _minETHReturned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondingCurve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      _price: BigNumberish,
      _minTokensReturned: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLayer(
      _URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    created(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    curateLayer(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    curated(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLayer(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _bondingCurve: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ppm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCreatedLayer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeCuratedLayer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sell(
      _tokens: BigNumberish,
      _minETHReturned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
