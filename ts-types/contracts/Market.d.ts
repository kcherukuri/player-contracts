/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "addLayer(string,uint256)": FunctionFragment;
    "addStake(uint256,uint256)": FunctionFragment;
    "addressIsBeneficiary(address)": FunctionFragment;
    "addressToLayerIndex(address,uint256)": FunctionFragment;
    "beneficiaryIndex(address)": FunctionFragment;
    "beneficiaryRewards(address)": FunctionFragment;
    "calculateInitializationReturn(uint256,uint32,uint256)": FunctionFragment;
    "calculatePurchaseReturn(uint256,uint256,uint32,uint256)": FunctionFragment;
    "calculateSaleReturn(uint256,uint256,uint32,uint256)": FunctionFragment;
    "claimBeneficiaryReward(address)": FunctionFragment;
    "claimCreatorReward(address)": FunctionFragment;
    "creator()": FunctionFragment;
    "feePct()": FunctionFragment;
    "foundationURI()": FunctionFragment;
    "getLayerCreator(uint256)": FunctionFragment;
    "initialize(address,string)": FunctionFragment;
    "initializeSupply(uint256)": FunctionFragment;
    "layers(uint256)": FunctionFragment;
    "pctBase()": FunctionFragment;
    "poolBalance()": FunctionFragment;
    "ppm()": FunctionFragment;
    "reserveRatio()": FunctionFragment;
    "slopeD()": FunctionFragment;
    "slopeN()": FunctionFragment;
    "supplyInitialized()": FunctionFragment;
    "totalBalance(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLayer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addStake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressIsBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToLayerIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInitializationReturn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePurchaseReturn",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSaleReturn",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBeneficiaryReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCreatorReward",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(functionFragment: "feePct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "foundationURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLayerCreator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "layers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pctBase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ppm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "slopeD", values?: undefined): string;
  encodeFunctionData(functionFragment: "slopeN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supplyInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addLayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressIsBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToLayerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInitializationReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePurchaseReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSaleReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBeneficiaryReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCreatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "foundationURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLayerCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "layers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pctBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ppm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slopeD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slopeN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;

  events: {
    "BeneficiaryClaimed(address)": EventFragment;
    "Buy(address,uint256,uint256,uint256,uint256)": EventFragment;
    "CreatorClaimed(address)": EventFragment;
    "FoundationLayerAdded(address,string,uint256)": EventFragment;
    "InitialSupplyCreated(address,uint256,uint256,uint256)": EventFragment;
    "LayerAdded(address,string,uint256,uint256)": EventFragment;
    "Removed(address,uint256,uint256)": EventFragment;
    "RewardsAdded(uint256)": EventFragment;
    "Sell(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Staked(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BeneficiaryClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatorClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FoundationLayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitialSupplyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Removed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
}

export class Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketInterface;

  functions: {
    addLayer(
      _contentURI: string,
      _minTokensToStake: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addStake(
      _layerIndex: BigNumberish,
      _minTokensToStake: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressIsBeneficiary(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addressToLayerIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    beneficiaryIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    beneficiaryRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateInitializationReturn(
      _price: BigNumberish,
      _reserveRatio: BigNumberish,
      _slope: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _poolBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _poolBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimBeneficiaryReward(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCreatorReward(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    feePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    foundationURI(overrides?: CallOverrides): Promise<[string]>;

    getLayerCreator(
      _layerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _creator: string,
      _foundationURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeSupply(
      _eth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    layers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        layerCreator: string;
        URI: string;
        stakedTokens: BigNumber;
      }
    >;

    pctBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    ppm(overrides?: CallOverrides): Promise<[number]>;

    reserveRatio(overrides?: CallOverrides): Promise<[number]>;

    slopeD(overrides?: CallOverrides): Promise<[BigNumber]>;

    slopeN(overrides?: CallOverrides): Promise<[BigNumber]>;

    supplyInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    totalBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addLayer(
    _contentURI: string,
    _minTokensToStake: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addStake(
    _layerIndex: BigNumberish,
    _minTokensToStake: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressIsBeneficiary(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addressToLayerIndex(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beneficiaryIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  beneficiaryRewards(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateInitializationReturn(
    _price: BigNumberish,
    _reserveRatio: BigNumberish,
    _slope: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePurchaseReturn(
    _supply: BigNumberish,
    _poolBalance: BigNumberish,
    _reserveRatio: BigNumberish,
    _price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSaleReturn(
    _supply: BigNumberish,
    _poolBalance: BigNumberish,
    _reserveRatio: BigNumberish,
    _tokens: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimBeneficiaryReward(
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCreatorReward(
    _creator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creator(overrides?: CallOverrides): Promise<string>;

  feePct(overrides?: CallOverrides): Promise<BigNumber>;

  foundationURI(overrides?: CallOverrides): Promise<string>;

  getLayerCreator(
    _layerIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _creator: string,
    _foundationURI: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeSupply(
    _eth: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  layers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      layerCreator: string;
      URI: string;
      stakedTokens: BigNumber;
    }
  >;

  pctBase(overrides?: CallOverrides): Promise<BigNumber>;

  poolBalance(overrides?: CallOverrides): Promise<BigNumber>;

  ppm(overrides?: CallOverrides): Promise<number>;

  reserveRatio(overrides?: CallOverrides): Promise<number>;

  slopeD(overrides?: CallOverrides): Promise<BigNumber>;

  slopeN(overrides?: CallOverrides): Promise<BigNumber>;

  supplyInitialized(overrides?: CallOverrides): Promise<boolean>;

  totalBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addLayer(
      _contentURI: string,
      _minTokensToStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addStake(
      _layerIndex: BigNumberish,
      _minTokensToStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addressIsBeneficiary(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addressToLayerIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiaryIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiaryRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInitializationReturn(
      _price: BigNumberish,
      _reserveRatio: BigNumberish,
      _slope: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _poolBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _poolBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBeneficiaryReward(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimCreatorReward(
      _creator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    creator(overrides?: CallOverrides): Promise<string>;

    feePct(overrides?: CallOverrides): Promise<BigNumber>;

    foundationURI(overrides?: CallOverrides): Promise<string>;

    getLayerCreator(
      _layerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _creator: string,
      _foundationURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeSupply(
      _eth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    layers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        layerCreator: string;
        URI: string;
        stakedTokens: BigNumber;
      }
    >;

    pctBase(overrides?: CallOverrides): Promise<BigNumber>;

    poolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    ppm(overrides?: CallOverrides): Promise<number>;

    reserveRatio(overrides?: CallOverrides): Promise<number>;

    slopeD(overrides?: CallOverrides): Promise<BigNumber>;

    slopeN(overrides?: CallOverrides): Promise<BigNumber>;

    supplyInitialized(overrides?: CallOverrides): Promise<boolean>;

    totalBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    BeneficiaryClaimed(
      beneficiary?: string | null
    ): TypedEventFilter<[string], { beneficiary: string }>;

    Buy(
      buyer?: string | null,
      poolBalance?: null,
      totalSupply?: null,
      tokens?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        poolBalance: BigNumber;
        totalSupply: BigNumber;
        tokens: BigNumber;
        price: BigNumber;
      }
    >;

    CreatorClaimed(
      creator?: string | null
    ): TypedEventFilter<[string], { creator: string }>;

    FoundationLayerAdded(
      creator?: string | null,
      foundationURI?: null,
      layerIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { creator: string; foundationURI: string; layerIndex: BigNumber }
    >;

    InitialSupplyCreated(
      buyer?: string | null,
      poolBalance?: null,
      totalSupply?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        poolBalance: BigNumber;
        totalSupply: BigNumber;
        price: BigNumber;
      }
    >;

    LayerAdded(
      layerCreator?: string | null,
      contentURI?: null,
      layerIndex?: null,
      tokensStaked?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        layerCreator: string;
        contentURI: string;
        layerIndex: BigNumber;
        tokensStaked: BigNumber;
      }
    >;

    Removed(
      curator?: string | null,
      layerIndex?: null,
      tokensRemoved?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { curator: string; layerIndex: BigNumber; tokensRemoved: BigNumber }
    >;

    RewardsAdded(
      totalRewardAmount?: null
    ): TypedEventFilter<[BigNumber], { totalRewardAmount: BigNumber }>;

    Sell(
      seller?: string | null,
      poolBalance?: null,
      totalSupply?: null,
      tokens?: null,
      eth?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        seller: string;
        poolBalance: BigNumber;
        totalSupply: BigNumber;
        tokens: BigNumber;
        eth: BigNumber;
      }
    >;

    Staked(
      curator?: string | null,
      layerIndex?: null,
      tokensStaked?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { curator: string; layerIndex: BigNumber; tokensStaked: BigNumber }
    >;
  };

  estimateGas: {
    addLayer(
      _contentURI: string,
      _minTokensToStake: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addStake(
      _layerIndex: BigNumberish,
      _minTokensToStake: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressIsBeneficiary(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressToLayerIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiaryIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiaryRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateInitializationReturn(
      _price: BigNumberish,
      _reserveRatio: BigNumberish,
      _slope: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _poolBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _poolBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBeneficiaryReward(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCreatorReward(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    feePct(overrides?: CallOverrides): Promise<BigNumber>;

    foundationURI(overrides?: CallOverrides): Promise<BigNumber>;

    getLayerCreator(
      _layerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _creator: string,
      _foundationURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeSupply(
      _eth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    layers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pctBase(overrides?: CallOverrides): Promise<BigNumber>;

    poolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    ppm(overrides?: CallOverrides): Promise<BigNumber>;

    reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    slopeD(overrides?: CallOverrides): Promise<BigNumber>;

    slopeN(overrides?: CallOverrides): Promise<BigNumber>;

    supplyInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLayer(
      _contentURI: string,
      _minTokensToStake: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addStake(
      _layerIndex: BigNumberish,
      _minTokensToStake: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressIsBeneficiary(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressToLayerIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficiaryIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficiaryRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateInitializationReturn(
      _price: BigNumberish,
      _reserveRatio: BigNumberish,
      _slope: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePurchaseReturn(
      _supply: BigNumberish,
      _poolBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSaleReturn(
      _supply: BigNumberish,
      _poolBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimBeneficiaryReward(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCreatorReward(
      _creator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    foundationURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLayerCreator(
      _layerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _creator: string,
      _foundationURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeSupply(
      _eth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    layers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pctBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ppm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserveRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    slopeD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    slopeN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supplyInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
