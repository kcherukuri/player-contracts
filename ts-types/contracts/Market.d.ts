/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "addLayer(string)": FunctionFragment;
    "addressToCreatedLayerIndex(address,uint256)": FunctionFragment;
    "addressToCuratedLayerIndex(address,uint256)": FunctionFragment;
    "bondingCurve()": FunctionFragment;
    "buy(uint256,uint256)": FunctionFragment;
    "claimReward(address)": FunctionFragment;
    "curate(uint256)": FunctionFragment;
    "curators(uint256)": FunctionFragment;
    "feePct()": FunctionFragment;
    "initialize(string,string,address)": FunctionFragment;
    "isCurating(address)": FunctionFragment;
    "isCuratingLayer(address,uint256)": FunctionFragment;
    "layers(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "pctBase()": FunctionFragment;
    "poolBalance()": FunctionFragment;
    "ppm()": FunctionFragment;
    "removeCuration(uint256)": FunctionFragment;
    "reserveRatio()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "sell(uint256,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalBalance(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addLayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addressToCreatedLayerIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToCuratedLayerIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bondingCurve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "curate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "curators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feePct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "isCurating", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isCuratingLayer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "layers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "pctBase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ppm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeCuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addLayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressToCreatedLayerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToCuratedLayerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "curate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feePct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCurating", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCuratingLayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "layers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pctBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ppm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;

  events: {
    "Buy(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Curated(address,uint256)": EventFragment;
    "LayerAdded(address,string,uint256)": EventFragment;
    "Removed(address,uint256)": EventFragment;
    "RewardClaimed(address)": EventFragment;
    "RewardsAdded(uint256)": EventFragment;
    "Sell(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Curated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LayerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Removed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
}

export class Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketInterface;

  functions: {
    addLayer(
      _URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressToCreatedLayerIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addressToCuratedLayerIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bondingCurve(overrides?: CallOverrides): Promise<[string]>;

    buy(
      _price: BigNumberish,
      _minTokensReturned: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    curate(
      _layerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    curators(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    feePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _name: string,
      _symbol: string,
      _bondingCurve: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCurating(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isCuratingLayer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    layers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { creator: string; URI: string }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pctBase(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    ppm(overrides?: CallOverrides): Promise<[number]>;

    removeCuration(
      _layerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserveRatio(overrides?: CallOverrides): Promise<[number]>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    sell(
      _tokens: BigNumberish,
      _minETHReturned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addLayer(
    _URI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressToCreatedLayerIndex(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addressToCuratedLayerIndex(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondingCurve(overrides?: CallOverrides): Promise<string>;

  buy(
    _price: BigNumberish,
    _minTokensReturned: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  curate(
    _layerIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  curators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  feePct(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _name: string,
    _symbol: string,
    _bondingCurve: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCurating(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isCuratingLayer(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  layers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { creator: string; URI: string }>;

  name(overrides?: CallOverrides): Promise<string>;

  pctBase(overrides?: CallOverrides): Promise<BigNumber>;

  poolBalance(overrides?: CallOverrides): Promise<BigNumber>;

  ppm(overrides?: CallOverrides): Promise<number>;

  removeCuration(
    _layerIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserveRatio(overrides?: CallOverrides): Promise<number>;

  rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  sell(
    _tokens: BigNumberish,
    _minETHReturned: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addLayer(_URI: string, overrides?: CallOverrides): Promise<boolean>;

    addressToCreatedLayerIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressToCuratedLayerIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingCurve(overrides?: CallOverrides): Promise<string>;

    buy(
      _price: BigNumberish,
      _minTokensReturned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimReward(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    curate(
      _layerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    curators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    feePct(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      _bondingCurve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isCurating(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isCuratingLayer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    layers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { creator: string; URI: string }>;

    name(overrides?: CallOverrides): Promise<string>;

    pctBase(overrides?: CallOverrides): Promise<BigNumber>;

    poolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    ppm(overrides?: CallOverrides): Promise<number>;

    removeCuration(
      _layerIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    reserveRatio(overrides?: CallOverrides): Promise<number>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sell(
      _tokens: BigNumberish,
      _minETHReturned: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Buy(
      buyer?: string | null,
      poolBalance?: null,
      totalSupply?: null,
      tokens?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        buyer: string;
        poolBalance: BigNumber;
        totalSupply: BigNumber;
        tokens: BigNumber;
        price: BigNumber;
      }
    >;

    Curated(
      curator?: string | null,
      layerIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { curator: string; layerIndex: BigNumber }
    >;

    LayerAdded(
      creator?: string | null,
      contentURI?: null,
      layerIndex?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { creator: string; contentURI: string; layerIndex: BigNumber }
    >;

    Removed(
      curator?: string | null,
      layerIndex?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { curator: string; layerIndex: BigNumber }
    >;

    RewardClaimed(
      beneficiary?: string | null
    ): TypedEventFilter<[string], { beneficiary: string }>;

    RewardsAdded(
      totalRewardAmount?: null
    ): TypedEventFilter<[BigNumber], { totalRewardAmount: BigNumber }>;

    Sell(
      seller?: string | null,
      poolBalance?: null,
      totalSupply?: null,
      tokens?: null,
      eth?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        seller: string;
        poolBalance: BigNumber;
        totalSupply: BigNumber;
        tokens: BigNumber;
        eth: BigNumber;
      }
    >;
  };

  estimateGas: {
    addLayer(
      _URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressToCreatedLayerIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressToCuratedLayerIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingCurve(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      _price: BigNumberish,
      _minTokensReturned: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    curate(
      _layerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    curators(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    feePct(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      _bondingCurve: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCurating(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isCuratingLayer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    layers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pctBase(overrides?: CallOverrides): Promise<BigNumber>;

    poolBalance(overrides?: CallOverrides): Promise<BigNumber>;

    ppm(overrides?: CallOverrides): Promise<BigNumber>;

    removeCuration(
      _layerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserveRatio(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sell(
      _tokens: BigNumberish,
      _minETHReturned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addLayer(
      _URI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressToCreatedLayerIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressToCuratedLayerIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondingCurve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      _price: BigNumberish,
      _minTokensReturned: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    curate(
      _layerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    curators(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      _bondingCurve: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCurating(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCuratingLayer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    layers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pctBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ppm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCuration(
      _layerIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserveRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sell(
      _tokens: BigNumberish,
      _minETHReturned: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
